現在 Kafka の JVM クライアントをリライト中です。
0.8.2 では、新規に書き直された Java プロデューサーが同梱されています。
次期リリースでは同様に Java コンシューマを含める予定です。
これらの新しいクライアントは既存の Scala クライアントを置き換えるものとなる見込みですが、
互換性のためにしばらくは共存することになります。
これらのクライアントは別のjarで提供され、最低限の依存関係だけが定義されています。
過去の Scala クライアントは、サーバと同じパッケージに同梱されていました。
[fn:: (訳注) 0.8.2 のリリースにconsumerも一部既に含まれていますが、正式には 0.9 で利用可能なようです( [[http://mail-archives.apache.org/mod_mbox/kafka-users/201505.mbox/%3C7D2658D6A1CA594AAD4246FFB16B38786FED5F7A%40LCA1-MB04.linkedin.biz%3E][RE: Java Consumer API]] 、 [[http://mail-archives.apache.org/mod_mbox/kafka-users/201503.mbox/%3CD13F868B.15C38%25jqin%40linkedin.com%3E][Re: Consumer in Java client]] )]

* プロデューサ API
0.8.2 では、新規開発には新しい Java プロデューサを使うことを強くお奨めします。
これは実稼動環境での試験が済んでおり、一般的に以前の Scala クライアントよりも高速で高機能です。
以下のように、クライアント jar への依存を maven の pom に指定することで利用できます:

#+BEGIN_SRC xml
	<dependency>
	    <groupId>org.apache.kafka</groupId>
	    <artifactId>kafka-clients</artifactId>
	    <version>0.8.2.0</version>
	</dependency>
#+END_SRC

使い方や使用例は [[http://kafka.apache.org/082/javadoc/index.html?org/apache/kafka/clients/producer/KafkaProducer.html][javadoc]] に書かれています。

レガシーな Scala プロデューサ API についてもし興味があれば、 [[http://kafka.apache.org/081/documentation.html#producerapi][ここ]] を参照してください。

* ハイレベルコンシューマ API

#+BEGIN_SRC java
class Consumer {
  /**
   ,*  ConsumerConnector の作成
   ,*
   ,*  @param config  コンシューマの groupid と、 ZooKeeper との接続情報文字列 zookeeper.connect が、
   ,*                 最低限必要
   ,*/
  public static kafka.javaapi.consumer.ConsumerConnector createJavaConsumerConnector(ConsumerConfig config);
}

/**
 ,*  V: メッセージの型
 ,*  K: メッセージに関連付けられたオプショナルなキー
 ,*/
public interface kafka.javaapi.consumer.ConsumerConnector {
  /**
   ,*  トピック毎に <K,V> 型のメッセージストリームのリストを生成する。
   ,*
   ,*  @param topicCountMap  (トピック, ストリーム数) の Map
   ,*  @param keyDecoder バイト列の Message を K 型へ変換するデコーダ
   ,*  @param valueDecoder バイト列の Message から V 型へ変換するデコーダ
   ,*  @return (トピック, KafkaStream のリスト) の Map。
   ,*          リストの要素数はストリーム数となる。
   ,*          各ストリームは (メッセージ, メタデータ) のペア (MessageAndMetadata) のイテレータをサポートする。
   ,*/
  public <K,V> Map<String, List<KafkaStream<K,V>>>
    createMessageStreams(Map<String, Integer> topicCountMap, Decoder<K> keyDecoder, Decoder<V> valueDecoder);

  /**
   ,*  デフォルトのデコーダでトピック毎のストリームのリストを作成する。
   ,*/
  public Map<String, List<KafkaStream<byte[], byte[]>>> createMessageStreams(Map<String, Integer> topicCountMap);

  /**
   ,*  ワイルドカードにマッチしたトピックのメッセージストリームのリストを作成する。 
   ,*
   ,*  @param topicFilter どのトピックを購読するかを特定する TopicFilter
   ,*                     (ホワイトリスト方式かブラックリスト方式かを隠蔽している)。
   ,*  @param numStreams 返すメッセージストリームの数
   ,*  @param keyDecoder メッセージキーをデコードするデコーダ
   ,*  @param valueDecoder メッセージ自身をデコードするデコーダ
   ,*  @return KafkaStream のリスト。
   ,*          各ストリームは MessageAndMetadata 要素のイテレータをサポートする。
   ,*/
  public <K,V> List<KafkaStream<K,V>>
    createMessageStreamsByFilter(TopicFilter topicFilter, int numStreams, Decoder<K> keyDecoder, Decoder<V> valueDecoder);

  /**
   ,*  デフォルトのデコーダでワイルドカードにマッチしたトピックのメッセージストリームのリストを作成する。 
   ,*/
  public List<KafkaStream<byte[], byte[]>> createMessageStreamsByFilter(TopicFilter topicFilter, int numStreams);

  /**
   ,*  ワイルドカードにマッチしたトピックのメッセージストリームをデフォルトのデコーダで一つだけ作成する。
   ,*/
  public List<KafkaStream<byte[], byte[]>> createMessageStreamsByFilter(TopicFilter topicFilter);

  /**
   ,*  このコネクタで接続している全てのトピック/パーティションのオフセットをコミットする
   ,*/
  public void commitOffsets();

  /**
   ,*  コネクタをシャットダウンする
   */
  public void shutdown();
}
#+END_SRC

[fn:: (訳注) 関連ソース [[https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/consumer/ConsumerConnector.scala][ConsumerConnector]] 、[[https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/consumer/KafkaStream.scala][KafkaStream]] 、 [[https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/message/MessageAndMetadata.scala][MessageAndMetadata]]]

ハイレベルコンシューマ API の使い方を習得するには、[[https://cwiki.apache.org/confluence/display/KAFKA/Consumer%2BGroup%2BExample][この例]] を参照して下さい。

* シンプルコンシューマ API

#+BEGIN_SRC java
class kafka.javaapi.consumer.SimpleConsumer {
  /**
   *  トピックからメッセージのセットを取得する。
   *
   *  @param 取得するトピック名、パーティション、開始バイトオフセット、最大バイトを指定するリクエスト
   *  @return 取得したメッセージのセット
   */
  public FetchResponse fetch(kafka.javaapi.FetchRequest request);

  /**
   *  複数トピックのメタデータを取得する。
   *
   *  @param 取得する versionId, clientId, topic のシーケンスを指定するリクエスト。
   *  @return リクエストされた各トピックのメタデータ。
   */
  public kafka.javaapi.TopicMetadataResponse send(kafka.javaapi.TopicMetadataRequest request);

  /**
   *  与えられた時刻より以前の(maxSize以下の)妥当なオフセットのリストを取得する。
   */
  public kafak.javaapi.OffsetResponse getOffsetsBefore(OffsetRequest request);

  /**
   * シンプルコンシューマをクローズする。
   */
  public void close();
}
#+END_SRC

[fn:: (訳注) 関連ソース [[https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/consumer/SimpleConsumer.scala][SimpleConsumer]] 、 [[https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/api/FetchRequest.scala][FetchRequest]] 、 [[https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/api/FetchResponse.scala][FetchResponse]] 、 [[https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/api/TopicMetadataRequest.scala][TopicMetadataRequest]] 、 [[https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/api/TopicMetadataResponse.scala][TopicMetadataResponse]] 、[[https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/api/OffsetRequest.scala][OffsetRequest]] 、[[https://github.com/apache/kafka/blob/0.8.2/core/src/main/scala/kafka/api/OffsetResponse.scala][OffsetResponse]] ]

ほとんどのアプリケーションはハイレベルコンシューマ API で十分でしょう。
ハイレベルコンシューマではまだ提供されていない機能を利用したいアプリケーションもあるかもしれません
(例えば、 再起動時の初期オフセットを設定するなど)。
その場合は低レベルな SimpleConsumer Api を利用出来ます。
利用する際のロジックはより複雑になります。
[[https://cwiki.apache.org/confluence/display/KAFKA/0.8.0%2BSimpleConsumer%2BExample][こちら]] の例に従ってやってみてください。

* Kafka Hadoop コンシューマ API

データを集約し Hadoop に保存する、水平スケールするソリューションを提供するというのは、基本的なユースケースでした。
このユースケースをサポートするため、
Kafka クラスタから並列にデータを取得する大量のマップタスクを起動させる、Hadoop ベースのコンシューマを提供しています。
これにより高速なプルペースの Hadoop データロードが実現できます
(ごく少ない Kafka サーバだけでネットワーク帯域を完全に使い切ることが出来ていました)。

Hadoop コンシューマの使用方法は [[https://github.com/linkedin/camus/][こちら]] です。
